name: "DeepanoFace"
input: "data"
layer {
	name: "data"
	type: "AnnotatedData"
	top: "data"
	top: "label"
	include {
		phase: TEST
	}
	transform_param {
		scale: 0.007843
		mean_value: 103.94
		mean_value: 116.78
		mean_value: 123.68
		resize_param {
			prob: 1.0
			resize_mode: WARP
			height: 512
			width: 512
			interp_mode: LINEAR
		}
	}
	data_param {
		source: "../../../../../dataset/facedata/wider_face/lmdb/wider_face_wider_val_lmdb/"
		batch_size: 8
		backend: LMDB
	}
	annotated_data_param {
		batch_sampler {
		}
		label_map_file: "../labelmap_face.prototxt"
	}
}


layer {
    bottom: "data"
    top: "conv1"
    name: "conv1"
    type: "Convolution"
    convolution_param {
        num_output: 64
        kernel_size: 7
        pad: 3
        stride: 2
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "conv1"
    top: "conv1"
    name: "bn_conv1"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "conv1"
    top: "conv1"
    name: "scale_conv1"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "conv1"
    top: "conv1"
    name: "conv1_relu"
    type: "ReLU"
}

layer {
    bottom: "conv1"
    top: "pool1"
    name: "pool1"
    type: "Pooling"
    pooling_param {
        kernel_size: 3
        stride: 2
        pool: MAX
    }
}

layer {
    bottom: "pool1"
    top: "res2a_branch1"
    name: "res2a_branch1"
    type: "Convolution"
    convolution_param {
        num_output: 64
        kernel_size: 1
        pad: 0
        stride: 1
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res2a_branch1"
    top: "res2a_branch1"
    name: "bn2a_branch1"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res2a_branch1"
    top: "res2a_branch1"
    name: "scale2a_branch1"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "pool1"
    top: "res2a_branch2a"
    name: "res2a_branch2a"
    type: "Convolution"
    convolution_param {
        num_output: 64
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res2a_branch2a"
    top: "res2a_branch2a"
    name: "bn2a_branch2a"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res2a_branch2a"
    top: "res2a_branch2a"
    name: "scale2a_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res2a_branch2a"
    top: "res2a_branch2a"
    name: "res2a_branch2a_relu"
    type: "ReLU"
}

layer {
    bottom: "res2a_branch2a"
    top: "res2a_branch2b"
    name: "res2a_branch2b"
    type: "Convolution"
    convolution_param {
        num_output: 64
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res2a_branch2b"
    top: "res2a_branch2b"
    name: "bn2a_branch2b"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res2a_branch2b"
    top: "res2a_branch2b"
    name: "scale2a_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res2a_branch1"
    bottom: "res2a_branch2b"
    top: "res2a"
    name: "res2a"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res2a"
    top: "res2a"
    name: "res2a_relu"
    type: "ReLU"
}


layer {
    bottom: "res2a"
    top: "res3a_branch1"
    name: "res3a_branch1"
    type: "Convolution"
    convolution_param {
        num_output: 128
        kernel_size: 1
        pad: 0
        stride: 2
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res3a_branch1"
    top: "res3a_branch1"
    name: "bn3a_branch1"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res3a_branch1"
    top: "res3a_branch1"
    name: "scale3a_branch1"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res2a"
    top: "res3a_branch2a"
    name: "res3a_branch2a"
    type: "Convolution"
    convolution_param {
        num_output: 128
        kernel_size: 3
        pad: 1
        stride: 2
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res3a_branch2a"
    top: "res3a_branch2a"
    name: "bn3a_branch2a"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res3a_branch2a"
    top: "res3a_branch2a"
    name: "scale3a_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res3a_branch2a"
    top: "res3a_branch2a"
    name: "res3a_branch2a_relu"
    type: "ReLU"
}

layer {
    bottom: "res3a_branch2a"
    top: "res3a_branch2b"
    name: "res3a_branch2b"
    type: "Convolution"
    convolution_param {
        num_output: 128
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res3a_branch2b"
    top: "res3a_branch2b"
    name: "bn3a_branch2b"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res3a_branch2b"
    top: "res3a_branch2b"
    name: "scale3a_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res3a_branch1"
    bottom: "res3a_branch2b"
    top: "res3a"
    name: "res3a"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res3a"
    top: "res3a"
    name: "res3a_relu"
    type: "ReLU"
}



layer {
    bottom: "res3a"
    top: "res4a_branch1"
    name: "res4a_branch1"
    type: "Convolution"
    convolution_param {
        num_output: 256
        kernel_size: 1
        pad: 0
        stride: 2
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res4a_branch1"
    top: "res4a_branch1"
    name: "bn4a_branch1"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res4a_branch1"
    top: "res4a_branch1"
    name: "scale4a_branch1"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res3a"
    top: "res4a_branch2a"
    name: "res4a_branch2a"
    type: "Convolution"
    convolution_param {
        num_output: 256
        kernel_size: 3
        pad: 1
        stride: 2
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res4a_branch2a"
    top: "res4a_branch2a"
    name: "bn4a_branch2a"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res4a_branch2a"
    top: "res4a_branch2a"
    name: "scale4a_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res4a_branch2a"
    top: "res4a_branch2a"
    name: "res4a_branch2a_relu"
    type: "ReLU"
}

layer {
    bottom: "res4a_branch2a"
    top: "res4a_branch2b"
    name: "res4a_branch2b"
    type: "Convolution"
    convolution_param {
        num_output: 256
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res4a_branch2b"
    top: "res4a_branch2b"
    name: "bn4a_branch2b"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res4a_branch2b"
    top: "res4a_branch2b"
    name: "scale4a_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res4a_branch1"
    bottom: "res4a_branch2b"
    top: "res4a"
    name: "res4a"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res4a"
    top: "res4a"
    name: "res4a_relu"
    type: "ReLU"
}



layer {
    bottom: "res4a"
    top: "res5a_branch1"
    name: "res5a_branch1"
    type: "Convolution"
    convolution_param {
        num_output: 256
        kernel_size: 1
        pad: 0
        stride: 2
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res5a_branch1"
    top: "res5a_branch1"
    name: "bn5a_branch1"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res5a_branch1"
    top: "res5a_branch1"
    name: "scale5a_branch1"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res4a"
    top: "res5a_branch2a"
    name: "res5a_branch2a"
    type: "Convolution"
    convolution_param {
        num_output: 256
        kernel_size: 3
        pad: 1
        stride: 2
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res5a_branch2a"
    top: "res5a_branch2a"
    name: "bn5a_branch2a"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res5a_branch2a"
    top: "res5a_branch2a"
    name: "scale5a_branch2a"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res5a_branch2a"
    top: "res5a_branch2a"
    name: "res5a_branch2a_relu"
    type: "ReLU"
}

layer {
    bottom: "res5a_branch2a"
    top: "res5a_branch2b"
    name: "res5a_branch2b"
    type: "Convolution"
    convolution_param {
        num_output: 256
        kernel_size: 3
        pad: 1
        stride: 1
        weight_filler {
            type: "msra"
        }
        bias_term: false

    }
}

layer {
    bottom: "res5a_branch2b"
    top: "res5a_branch2b"
    name: "bn5a_branch2b"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}

layer {
    bottom: "res5a_branch2b"
    top: "res5a_branch2b"
    name: "scale5a_branch2b"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
    bottom: "res5a_branch1"
    bottom: "res5a_branch2b"
    top: "res5a"
    name: "res5a"
    type: "Eltwise"
    eltwise_param {
        operation: SUM
    }
}

layer {
    bottom: "res5a"
    top: "res5a"
    name: "res5a_relu"
    type: "ReLU"
}
layer {
  name: "res5a_priorbox"
  type: "PriorBox"
  bottom: "res5a"
  bottom: "data"
  top: "res5a_priorbox"
  prior_box_param {
    fixed_size: 32
    fixed_size: 64
    fixed_size: 128
    density: 4
    density: 2
    density: 1
    step:32
    variance: 0.1
    variance: 0.1
    variance: 0.2
    variance: 0.2
    offset: 0.5
  }
}

layer {
  name: "res5a_loc"
  type: "Convolution"
  bottom: "res5a"
  top: "res5a_loc"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 84
    pad: 1
    kernel_size: 3
    stride: 1
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "res5a_loc_perm"
  type: "Permute"
  bottom: "res5a_loc"
  top: "res5a_loc_perm"
  permute_param {
    order: 0
    order: 2
    order: 3
    order: 1
  }
}
layer {
  name: "res5a_loc_flat"
  type: "Flatten"
  bottom: "res5a_loc_perm"
  top: "res5a_loc_flat"
  flatten_param {
    axis: 1
  }
}

layer {
  name: "res5a_conf"
  type: "Convolution"
  bottom: "res5a"
  top: "res5a_conf"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 42
    pad: 1
    kernel_size: 3
    stride: 1
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "res5a_conf_perm"
  type: "Permute"
  bottom: "res5a_conf"
  top: "res5a_conf_perm"
  permute_param {
    order: 0
    order: 2
    order: 3
    order: 1
  }
}
layer {
  name: "res5a_conf_flat"
  type: "Flatten"
  bottom: "res5a_conf_perm"
  top: "res5a_conf_flat"
  flatten_param {
    axis: 1
  }
}

layer {
	name: "res5a_blur"
	type: "Convolution"
	bottom: "res5a"
	top: "res5a_blur"
	param {
		lr_mult: 1.0
		decay_mult: 1.0
	}
	param {
		lr_mult: 2.0
		decay_mult: 0.0
	}
	convolution_param {
		num_output: 63
		kernel_size: 1
		weight_filler {
			type: "msra"
		}
		bias_filler {
			type: "constant"
			value: 0.0
		}
	}
}
layer {
	name: "res5a_blur_perm"
	type: "Permute"
	bottom: "res5a_blur"
	top: "res5a_blur_perm"
	permute_param {
		order: 0
		order: 2
		order: 3
		order: 1
	}
}
layer {
	name: "res5a_blur_flat"
	type: "Flatten"
	bottom: "res5a_blur_perm"
	top: "res5a_blur_flat"
	flatten_param {
		axis: 1
	}
}


layer {
	name: "res5a_occlu"
	type: "Convolution"
	bottom: "res5a"
	top: "res5a_occlu"
	param {
		lr_mult: 1.0
		decay_mult: 1.0
	}
	param {
		lr_mult: 2.0
		decay_mult: 0.0
	}
	convolution_param {
		num_output: 63
		kernel_size: 1
		weight_filler {
			type: "msra"
		}
		bias_filler {
			type: "constant"
			value: 0.0
		}
	}
}
layer {
	name: "res5a_occlu_perm"
	type: "Permute"
	bottom: "res5a_occlu"
	top: "res5a_occlu_perm"
	permute_param {
		order: 0
		order: 2
		order: 3
		order: 1
	}
}
layer {
	name: "res5a_occlu_flat"
	type: "Flatten"
	bottom: "res5a_occlu_perm"
	top: "res5a_occlu_flat"
	flatten_param {
		axis: 1
	}
}

##################################conv3#########################
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "res5a"
  top: "conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "conv3_1bn"
  type: "BatchNorm"
  bottom: "conv3_1"
  top: "conv3_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}

layer {
  name: "conv3_1scale"
  type: "Scale"
  bottom: "conv3_1"
  top: "conv3_1"
  param {
    lr_mult: 0.1
    decay_mult: 0
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 2
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "conv3_2bn"
  type: "BatchNorm"
  bottom: "conv3_2"
  top: "conv3_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}

layer {
  name: "conv3_2scale"
  type: "Scale"
  bottom: "conv3_2"
  top: "conv3_2"
  param {
    lr_mult: 0.1
    decay_mult: 0
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}

layer {
  name: "conv3_2_priorbox"
  type: "PriorBox"
  bottom: "conv3_2"
  bottom: "data"
  top: "conv3_2_priorbox"
  prior_box_param {
    fixed_size: 256
    density: 1
    step: 64
    variance: 0.1
    variance: 0.1
    variance: 0.2
    variance: 0.2
    offset: 0.5
  }
}

layer {
  name: "conv3_2_loc"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_2_loc"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4
    pad: 1
    kernel_size: 3
    stride: 1
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv3_2_loc_perm"
  type: "Permute"
  bottom: "conv3_2_loc"
  top: "conv3_2_loc_perm"
  permute_param {
    order: 0
    order: 2
    order: 3
    order: 1
  }
}
layer {
  name: "conv3_2_loc_flat"
  type: "Flatten"
  bottom: "conv3_2_loc_perm"
  top: "conv3_2_loc_flat"
  flatten_param {
    axis: 1
  }
}

layer {
  name: "conv3_2_conf"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_2_conf"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 2
    pad: 1
    kernel_size: 3
    stride: 1
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv3_2_conf_perm"
  type: "Permute"
  bottom: "conv3_2_conf"
  top: "conv3_2_conf_perm"
  permute_param {
    order: 0
    order: 2
    order: 3
    order: 1
  }
}
layer {
  name: "conv3_2_conf_flat"
  type: "Flatten"
  bottom: "conv3_2_conf_perm"
  top: "conv3_2_conf_flat"
  flatten_param {
    axis: 1
  }
}

layer {
	name: "conv3_2_blur"
	type: "Convolution"
	bottom: "conv3_2"
	top: "conv3_2_blur"
	param {
		lr_mult: 1.0
		decay_mult: 1.0
	}
	param {
		lr_mult: 2.0
		decay_mult: 0.0
	}
	convolution_param {
		num_output: 3
		kernel_size: 1
		weight_filler {
			type: "msra"
		}
		bias_filler {
			type: "constant"
			value: 0.0
		}
	}
}
layer {
	name: "conv3_2_blur_perm"
	type: "Permute"
	bottom: "conv3_2_blur"
	top: "conv3_2_blur_perm"
	permute_param {
		order: 0
		order: 2
		order: 3
		order: 1
	}
}
layer {
	name: "conv3_2_blur_flat"
	type: "Flatten"
	bottom: "conv3_2_blur_perm"
	top: "conv3_2_blur_flat"
	flatten_param {
		axis: 1
	}
}


layer {
	name: "conv3_2_occlu"
	type: "Convolution"
	bottom: "conv3_2"
	top: "conv3_2_occlu"
	param {
		lr_mult: 1.0
		decay_mult: 1.0
	}
	param {
		lr_mult: 2.0
		decay_mult: 0.0
	}
	convolution_param {
		num_output: 3
		kernel_size: 1
		weight_filler {
			type: "msra"
		}
		bias_filler {
			type: "constant"
			value: 0.0
		}
	}
}
layer {
	name: "conv3_2_occlu_perm"
	type: "Permute"
	bottom: "conv3_2_occlu"
	top: "conv3_2_occlu_perm"
	permute_param {
		order: 0
		order: 2
		order: 3
		order: 1
	}
}
layer {
	name: "conv3_2_occlu_flat"
	type: "Flatten"
	bottom: "conv3_2_occlu_perm"
	top: "conv3_2_occlu_flat"
	flatten_param {
		axis: 1
	}
}

##################################conv4#########################
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "conv4_1bn"
  type: "BatchNorm"
  bottom: "conv4_1"
  top: "conv4_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}

layer {
  name: "conv4_1scale"
  type: "Scale"
  bottom: "conv4_1"
  top: "conv4_1"
  param {
    lr_mult: 0.1
    decay_mult: 0
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 2
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "conv4_2bn"
  type: "BatchNorm"
  bottom: "conv4_2"
  top: "conv4_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}

layer {
  name: "conv4_2scale"
  type: "Scale"
  bottom: "conv4_2"
  top: "conv4_2"
  param {
    lr_mult: 0.1
    decay_mult: 0
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}

layer {
  name: "conv4_2_priorbox"
  type: "PriorBox"
  bottom: "conv4_2"
  bottom: "data"
  top: "conv4_2_priorbox"
  prior_box_param {
    fixed_size: 512
    density: 1
    step: 128
    variance: 0.1
    variance: 0.1
    variance: 0.2
    variance: 0.2
    offset: 0.5
  }
}

layer {
  name: "conv4_2_loc"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_2_loc"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4
    pad: 1
    kernel_size: 3
    stride: 1
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv4_2_loc_perm"
  type: "Permute"
  bottom: "conv4_2_loc"
  top: "conv4_2_loc_perm"
  permute_param {
    order: 0
    order: 2
    order: 3
    order: 1
  }
}
layer {
  name: "conv4_2_loc_flat"
  type: "Flatten"
  bottom: "conv4_2_loc_perm"
  top: "conv4_2_loc_flat"
  flatten_param {
    axis: 1
  }
}

layer {
  name: "conv4_2_conf"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_2_conf"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 2
    pad: 1
    kernel_size: 3
    stride: 1
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv4_2_conf_perm"
  type: "Permute"
  bottom: "conv4_2_conf"
  top: "conv4_2_conf_perm"
  permute_param {
    order: 0
    order: 2
    order: 3
    order: 1
  }
}
layer {
  name: "conv4_2_conf_flat"
  type: "Flatten"
  bottom: "conv4_2_conf_perm"
  top: "conv4_2_conf_flat"
  flatten_param {
    axis: 1
  }
}

layer {
	name: "conv4_2_blur"
	type: "Convolution"
	bottom: "conv4_2"
	top: "conv4_2_blur"
	param {
		lr_mult: 1.0
		decay_mult: 1.0
	}
	param {
		lr_mult: 2.0
		decay_mult: 0.0
	}
	convolution_param {
		num_output: 3
		kernel_size: 1
		weight_filler {
			type: "msra"
		}
		bias_filler {
			type: "constant"
			value: 0.0
		}
	}
}
layer {
	name: "conv4_2_blur_perm"
	type: "Permute"
	bottom: "conv4_2_blur"
	top: "conv4_2_blur_perm"
	permute_param {
		order: 0
		order: 2
		order: 3
		order: 1
	}
}
layer {
	name: "conv4_2_blur_flat"
	type: "Flatten"
	bottom: "conv4_2_blur_perm"
	top: "conv4_2_blur_flat"
	flatten_param {
		axis: 1
	}
}


layer {
	name: "conv4_2_occlu"
	type: "Convolution"
	bottom: "conv4_2"
	top: "conv4_2_occlu"
	param {
		lr_mult: 1.0
		decay_mult: 1.0
	}
	param {
		lr_mult: 2.0
		decay_mult: 0.0
	}
	convolution_param {
		num_output: 3
		kernel_size: 1
		weight_filler {
			type: "msra"
		}
		bias_filler {
			type: "constant"
			value: 0.0
		}
	}
}
layer {
	name: "conv4_2_occlu_perm"
	type: "Permute"
	bottom: "conv4_2_occlu"
	top: "conv4_2_occlu_perm"
	permute_param {
		order: 0
		order: 2
		order: 3
		order: 1
	}
}
layer {
	name: "conv4_2_occlu_flat"
	type: "Flatten"
	bottom: "conv4_2_occlu_perm"
	top: "conv4_2_occlu_flat"
	flatten_param {
		axis: 1
	}
}

################################################
layer {
  name: "mbox_priorbox"
  type: "Concat"
  bottom: "res5a_priorbox"
  bottom: "conv3_2_priorbox"
  bottom: "conv4_2_priorbox"
  top: "mbox_priorbox"
  concat_param {
    axis: 2
  }
}

layer {
  name: "mbox_loc"
  type: "Concat"
  bottom: "res5a_loc_flat"
  bottom: "conv3_2_loc_flat"
  bottom: "conv4_2_loc_flat"
  top: "mbox_loc"
  concat_param {
    axis: 1
  }
}


layer {
  name: "mbox_conf"
  type: "Concat"
  bottom: "res5a_conf_flat"
  bottom: "conv3_2_conf_flat"
  bottom: "conv4_2_conf_flat"
  top: "mbox_conf"
  concat_param {
    axis: 1
  }
}
layer {
  name: "mbox_blur"
  type: "Concat"
  bottom: "res5a_blur_flat"
  bottom: "conv3_2_blur_flat"
  bottom: "conv4_2_blur_flat"
  top: "mbox_blur"
  concat_param {
    axis: 1
  }
}

layer {
  name: "mbox_occlu"
  type: "Concat"
  bottom: "res5a_occlu_flat"
  bottom: "conv3_2_occlu_flat"
  bottom: "conv4_2_occlu_flat"
  top: "mbox_occlu"
  concat_param {
    axis: 1
  }
}

layer {
  name: "mbox_conf_reshape"
  type: "Reshape"
  bottom: "mbox_conf"
  top: "mbox_conf_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: -1
      dim: 2
    }
  }
}
layer {
  name: "mbox_conf_softmax"
  type: "Softmax"
  bottom: "mbox_conf_reshape"
  top: "mbox_conf_softmax"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "mbox_conf_flatten"
  type: "Flatten"
  bottom: "mbox_conf_softmax"
  top: "mbox_conf_flatten"
  flatten_param {
    axis: 1
  }
}
layer {
  name: "mbox_blur_reshape"
  type: "Reshape"
  bottom: "mbox_blur"
  top: "mbox_blur_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: -1
      dim: 3
    }
  }
}
layer {
  name: "mbox_blur_softmax"
  type: "Softmax"
  bottom: "mbox_blur_reshape"
  top: "mbox_blur_softmax"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "mbox_blur_flatten"
  type: "Flatten"
  bottom: "mbox_blur_softmax"
  top: "mbox_blur_flatten"
  flatten_param {
    axis: 1
  }
}
layer {
  name: "mbox_occlu_reshape"
  type: "Reshape"
  bottom: "mbox_occlu"
  top: "mbox_occlu_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: -1
      dim: 3
    }
  }
}
layer {
  name: "mbox_occlu_softmax"
  type: "Softmax"
  bottom: "mbox_occlu_reshape"
  top: "mbox_occlu_softmax"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "mbox_occlu_flatten"
  type: "Flatten"
  bottom: "mbox_occlu_softmax"
  top: "mbox_occlu_flatten"
  flatten_param {
    axis: 1
  }
}

layer {
  name: "detection_out"
  type: "DetectionOutput"
  bottom: "mbox_loc"
  bottom: "mbox_conf_flatten"
  bottom: "mbox_priorbox"
  bottom: "mbox_blur_flatten"
  bottom: "mbox_occlu_flatten"
  top: "detection_out"
  include {
    phase: TEST
  }
	detection_output_param {
	    attri_type: FACE
		num_classes: 2
		num_blur: 3
		num_occlusion: 3
		share_location: true
		background_label_id: 0
		nms_param {
			nms_threshold: 0.55
			top_k: 50
		}
		code_type: CENTER_SIZE
		keep_top_k: 50
		confidence_threshold: 0.25
	}
}
layer {
	name: "detection_eval"
	type: "DetectionEvaluate"
	bottom: "detection_out"
	bottom: "label"
	top: "detection_eval"
	include {
		phase: TEST
	}
	detection_evaluate_param {
	    attri_type: FACE
		num_classes: 2
		background_label_id: 0
		overlap_threshold: 0.5
		evaluate_difficult_gt: false
	}
}

